# Copyright Notice:
# Copyright 2016 Distributed Management Task Force, Inc. All rights reserved.
# License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/Redfish-Profile-Simulator/LICENSE.md

This directory has sub-directores for various HTTPD configurations.
In addition there is a template __init__.py file to handle any initialization functions related to the httpds.
RedDrum/redDrumMain.py will later call this library prior just prior to starting the RedfishService
     to handle any programatic setup not already done via other means

The following HTTPD configs are defines, and subfolders include conf files and description of the configurations

--Apache-ReverseProxy
    -- This is the httpd config used by the current BullRed-Rackmanager
    -- Apache has a virtualHost for http and https
    -- Apache handles all ssl and http processing and REVERSE PROXIES all /redfish/v1[/] traffic 
       to the builtin httpd inside the RedfishService   (Flask if RedfishService=FlaskApp)
    -- two conf files:  httpd.conf and ssl.conf
    -- a howto README on how to generate the ssl certs
    -- a bash script is here to show example requirement for disabling SElinux bouls and generating certs
    -- the reverse proxy also generates a couple of headers to tell the RedfishService whether the request
       originated on http or https
    -- performance measured on Rackmanager is awesome---letting Apache handle ssl is nice
       --Apache is running the ssl processing and socket handling multi-threaded and managing worker threads
         to talk to the Flask RedfishService
       --even though the Flask app is single threaded, a lot of the processing is thus done multi-threaded,
         and performance for multithreaded clients is faster


--FlaskBuiltinHttpd
    -- for Simulators or early dev implementations, it is good to use the builtin Flask HTTPD
    -- the RedfishService FlaskApp cannot be run threaded, and does not have https.
    -- it is also not recommended to run production code from builtin Flask httpd.
    -- so consider this a dev tool or simulator tool

--Rocket-ReverseProxy
    -- blaceholder for potential future Rocket httpd front-end

--BottleBuiltinHttpd
    -- blaceholder for potential Bottle REST engine--similar to Flask building httpd
